{"ast":null,"code":"var _jsxFileName = \"/home/ritesh/Desktop/projectkyc/projectkyc/src/SignUp/ProtectedRoutes/ProtectedRoutesForLogin.js\",\n  _s = $RefreshSig$();\n// import { Route } from 'react-router-dom';\n\n// import AdminHome from '../../Admin/AdminHome/AdminHome';\n// import UserHome from '../../UserHome/UserHome';\n// import CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\n// import { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n// import { useSelector } from 'react-redux';\n// import { useState } from 'react';\n\n// function ProtectedRoutesForLogin(Props) {\n\n//     // const loggedUser = useSelector((state) => state.user)\n\n//     // const userType= loggedUser\n//     // console.log(userType);\n//     const history = useHistory();\n//     const [loggedUser, setloggedUser] = useState({\n//         token: \"\",\n//         type: \"\",\n//         id: \"\",\n//         firstName: \"\",\n//         lastName: \"\",\n//         email: \"\",\n//         userType: \"\"\n//     })\n\n//     // Initialize the user data from the 'loggedUser' cookie when the component mounts\n\n//         const cookies = document.cookie.split('; ');\n//         for (const cookie of cookies) {\n//             const [name, value] = cookie.split('=');\n//             if (name === 'loggedUser') {\n//                 const user = JSON.parse(decodeURIComponent(value));\n//                 setloggedUser(user);\n//                 break;\n//             }\n//         }\n//         debugger;\n// console.log(loggedUser)\n\n//    // var UserType = sessionStorage.getItem(\"loggedUserDatausertype\");\n\n//     if (loggedUser.userType == \"ADMIN\") {\n//         return <Route exact path={Props.path} component={AdminHome}></Route>\n//     }\n\n//     else if (loggedUser.userType == \"VOTER\") {\n//         return <Route exact path={Props.path} component={UserHome}></Route>\n//     }\n\n//     else if (loggedUser.userType == \"CANDIDATE\") {\n//         return <Route exact path={Props.path} component={CandidateProfileForCandidate}></Route>\n//     }\n//     else {\n//         history.push(\"/Login\")\n//     }\n// }\n\n// export default ProtectedRoutesForLogin;\n\nimport React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport AdminHome from '../../Admin/AdminHome/AdminHome';\nimport UserHome from '../../UserHome/UserHome';\nimport CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoutesForLogin(Props) {\n  _s();\n  const history = useHistory();\n  const [loggedUser, setLoggedUser] = useState(null); // Initialize as null\n\n  useEffect(() => {\n    // Function to get the user data from cookies\n    const getCookie = name => {\n      const cookies = document.cookie.split('; ');\n      for (const cookie of cookies) {\n        const [cookieName, cookieValue] = cookie.split('=');\n        if (cookieName === 'loggedUser') {\n          return JSON.parse(decodeURIComponent(cookieValue));\n        }\n      }\n      return null; // Return null if the cookie is not found\n    };\n\n    // Read the user data from the 'loggedUser' cookie when the component mounts\n    const userFromCookie = getCookie('loggedUser');\n    if (userFromCookie) {\n      setLoggedUser(userFromCookie);\n    } else {\n      // Redirect to the login page if no user data is found in cookies\n      history.push(\"/Login\");\n    }\n  }, [history]);\n  debugger;\n  if (loggedUser && loggedUser.userType === \"ADMIN\") {\n    return /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: Props.path,\n      component: AdminHome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 16\n    }, this);\n  } else if (loggedUser && loggedUser.userType === \"VOTER\") {\n    return /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: Props.path,\n      component: UserHome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 16\n    }, this);\n  } else if (loggedUser && loggedUser.userType === \"CANDIDATE\") {\n    return /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: Props.path,\n      component: CandidateProfileForCandidate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 16\n    }, this);\n  } else {\n    return null; // Return null if no match is found (no re-routing here)\n  }\n}\n_s(ProtectedRoutesForLogin, \"Vb312jTI3cHFOXNCSU8Bn7v4Dvg=\", false, function () {\n  return [useHistory];\n});\n_c = ProtectedRoutesForLogin;\nexport default ProtectedRoutesForLogin;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoutesForLogin\");","map":{"version":3,"names":["React","useEffect","useState","Route","AdminHome","UserHome","CandidateProfileForCandidate","useHistory","jsxDEV","_jsxDEV","ProtectedRoutesForLogin","Props","_s","history","loggedUser","setLoggedUser","getCookie","name","cookies","document","cookie","split","cookieName","cookieValue","JSON","parse","decodeURIComponent","userFromCookie","push","userType","exact","path","component","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ritesh/Desktop/projectkyc/projectkyc/src/SignUp/ProtectedRoutes/ProtectedRoutesForLogin.js"],"sourcesContent":["// import { Route } from 'react-router-dom';\n\n// import AdminHome from '../../Admin/AdminHome/AdminHome';\n// import UserHome from '../../UserHome/UserHome';\n// import CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\n// import { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n// import { useSelector } from 'react-redux';\n// import { useState } from 'react';\n\n\n// function ProtectedRoutesForLogin(Props) {\n\n//     // const loggedUser = useSelector((state) => state.user)\n\n//     // const userType= loggedUser\n//     // console.log(userType);\n//     const history = useHistory();\n//     const [loggedUser, setloggedUser] = useState({\n//         token: \"\",\n//         type: \"\",\n//         id: \"\",\n//         firstName: \"\",\n//         lastName: \"\",\n//         email: \"\",\n//         userType: \"\"\n//     })\n\n//     // Initialize the user data from the 'loggedUser' cookie when the component mounts\n    \n//         const cookies = document.cookie.split('; ');\n//         for (const cookie of cookies) {\n//             const [name, value] = cookie.split('=');\n//             if (name === 'loggedUser') {\n//                 const user = JSON.parse(decodeURIComponent(value));\n//                 setloggedUser(user);\n//                 break;\n//             }\n//         }\n//         debugger;\n// console.log(loggedUser)\n\n//    // var UserType = sessionStorage.getItem(\"loggedUserDatausertype\");\n    \n//     if (loggedUser.userType == \"ADMIN\") {\n//         return <Route exact path={Props.path} component={AdminHome}></Route>\n//     }\n\n//     else if (loggedUser.userType == \"VOTER\") {\n//         return <Route exact path={Props.path} component={UserHome}></Route>\n//     }\n\n//     else if (loggedUser.userType == \"CANDIDATE\") {\n//         return <Route exact path={Props.path} component={CandidateProfileForCandidate}></Route>\n//     }\n//     else {\n//         history.push(\"/Login\")\n//     }\n// }\n\n// export default ProtectedRoutesForLogin;\n\n\nimport React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport AdminHome from '../../Admin/AdminHome/AdminHome';\nimport UserHome from '../../UserHome/UserHome';\nimport CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nfunction ProtectedRoutesForLogin(Props) {\n    const history = useHistory();\n    const [loggedUser, setLoggedUser] = useState(null); // Initialize as null\n\n    useEffect(() => {\n        // Function to get the user data from cookies\n        const getCookie = (name) => {\n            const cookies = document.cookie.split('; ');\n            for (const cookie of cookies) {\n                const [cookieName, cookieValue] = cookie.split('=');\n                if (cookieName === 'loggedUser') {\n                    return JSON.parse(decodeURIComponent(cookieValue));\n                }\n            }\n            return null; // Return null if the cookie is not found\n        };\n\n        // Read the user data from the 'loggedUser' cookie when the component mounts\n        const userFromCookie = getCookie('loggedUser');\n        if (userFromCookie) {\n            setLoggedUser(userFromCookie);\n        } else {\n            // Redirect to the login page if no user data is found in cookies\n            history.push(\"/Login\");\n        }\n    }, [history]);\n\n    debugger;\n    if (loggedUser && loggedUser.userType === \"ADMIN\") {\n        return <Route exact path={Props.path} component={AdminHome}></Route>\n    } else if (loggedUser && loggedUser.userType === \"VOTER\") {\n        return <Route exact path={Props.path} component={UserHome}></Route>\n    } else if (loggedUser && loggedUser.userType === \"CANDIDATE\") {\n        return <Route exact path={Props.path} component={CandidateProfileForCandidate}></Route>\n    } else {\n        return null; // Return null if no match is found (no re-routing here)\n    }\n}\n\nexport default ProtectedRoutesForLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}