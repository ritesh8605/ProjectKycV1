{"ast":null,"code":"var _jsxFileName = \"/home/ritesh/Desktop/projectkyc/projectkyc/src/SignUp/ProtectedRoutes/ProtectedRoutesForLogin.js\",\n  _s = $RefreshSig$();\nimport { Route } from 'react-router-dom';\nimport AdminHome from '../../Admin/AdminHome/AdminHome';\nimport UserHome from '../../UserHome/UserHome';\nimport CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoutesForLogin(Props) {\n  _s();\n  // const loggedUser = useSelector((state) => state.user)\n\n  // const userType= loggedUser\n  // console.log(userType);\n  const history = useHistory();\n  // const [loggedUser, setloggedUser] = useState({\n  //     token: \"\",\n  //     type: \"\",\n  //     id: \"\",\n  //     firstName: \"\",\n  //     lastName: \"\",\n  //     email: \"\",\n  //     userType: \"\"\n  // })\n\n  // // Initialize the user data from the 'loggedUser' cookie when the component mounts\n\n  //     const cookies = document.cookie.split('; ');\n  //     for (const cookie of cookies) {\n  //         const [name, value] = cookie.split('=');\n  //         if (name === 'loggedUser') {\n  //             const user = JSON.parse(decodeURIComponent(value));\n  //             setloggedUser(user);\n  //             break;\n  //         }\n  //     }\n  debugger;\n  const temp = \"ADMIN\";\n  // var UserType = sessionStorage.getItem(\"loggedUserDatausertype\");\n\n  if (temp == \"ADMIN\") {\n    return /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: Props.path,\n      component: AdminHome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  } else if (temp == \"VOTER\") {\n    return /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: Props.path,\n      component: UserHome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  } else if (loggedUser.userType == \"CANDIDATE\") {\n    return /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: Props.path,\n      component: CandidateProfileForCandidate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }, this);\n  } else {\n    history.push(\"/Login\");\n  }\n}\n_s(ProtectedRoutesForLogin, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n_c = ProtectedRoutesForLogin;\nexport default ProtectedRoutesForLogin;\n\n// import React, { useEffect, useState } from 'react';\n// import { Route } from 'react-router-dom';\n// import AdminHome from '../../Admin/AdminHome/AdminHome';\n// import UserHome from '../../UserHome/UserHome';\n// import CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\n// import { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\n// function ProtectedRoutesForLogin(Props) {\n//     const history = useHistory();\n\n//     const [loggedUser, setloggedUser] = useState({\n//         token: \"\",\n//         type: \"\",\n//         id: \"\",\n//         firstName: \"\",\n//         lastName: \"\",\n//         email: \"\",\n//         userType: \"\"\n//     })\n\n//     const getCookie = () => {\n//         const cookies = document.cookie.split('; ');\n//         for (const cookie of cookies) {\n//             const [cookieName, cookieValue] = cookie.split('=');\n//             if (cookieName === 'loggedUser') {\n//                 return JSON.parse(decodeURIComponent(cookieValue));\n//             }\n//         }\n//         return null;\n//     }\n\n//     // Read the user data from the 'loggedUser' cookie when the component mounts\n//     const userFromCookie = getCookie('loggedUser');\n//     if (userFromCookie) {\n//         setloggedUser(userFromCookie);\n//     } else {\n//         // Redirect to the login page if no user data is found in cookies\n//         history.push(\"/Login\");\n//     }\n\n//     debugger;\n//     if (loggedUser && loggedUser.userType === \"ADMIN\") {\n//         return <Route exact path={Props.path} component={AdminHome}></Route>\n//     } else if (loggedUser && loggedUser.userType === \"VOTER\") {\n//         return <Route exact path={Props.path} component={UserHome}></Route>\n//     } else if (loggedUser && loggedUser.userType === \"CANDIDATE\") {\n//         return <Route exact path={Props.path} component={CandidateProfileForCandidate}></Route>\n//     } else {\n//         return null; // Return null if no match is found (no re-routing here)\n//     }\n// }\n\n// export default ProtectedRoutesForLogin;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoutesForLogin\");","map":{"version":3,"names":["Route","AdminHome","UserHome","CandidateProfileForCandidate","useHistory","useSelector","useState","jsxDEV","_jsxDEV","ProtectedRoutesForLogin","Props","_s","history","temp","exact","path","component","fileName","_jsxFileName","lineNumber","columnNumber","loggedUser","userType","push","_c","$RefreshReg$"],"sources":["/home/ritesh/Desktop/projectkyc/projectkyc/src/SignUp/ProtectedRoutes/ProtectedRoutesForLogin.js"],"sourcesContent":["import { Route } from 'react-router-dom';\n\nimport AdminHome from '../../Admin/AdminHome/AdminHome';\nimport UserHome from '../../UserHome/UserHome';\nimport CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\n\n\nfunction ProtectedRoutesForLogin(Props) {\n\n    // const loggedUser = useSelector((state) => state.user)\n\n    // const userType= loggedUser\n    // console.log(userType);\n    const history = useHistory();\n    // const [loggedUser, setloggedUser] = useState({\n    //     token: \"\",\n    //     type: \"\",\n    //     id: \"\",\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     email: \"\",\n    //     userType: \"\"\n    // })\n\n    // // Initialize the user data from the 'loggedUser' cookie when the component mounts\n\n    //     const cookies = document.cookie.split('; ');\n    //     for (const cookie of cookies) {\n    //         const [name, value] = cookie.split('=');\n    //         if (name === 'loggedUser') {\n    //             const user = JSON.parse(decodeURIComponent(value));\n    //             setloggedUser(user);\n    //             break;\n    //         }\n    //     }\n        debugger;\n\nconst temp= \"ADMIN\";\n   // var UserType = sessionStorage.getItem(\"loggedUserDatausertype\");\n\n    if (temp == \"ADMIN\") {\n        return <Route exact path={Props.path} component={AdminHome}></Route>\n    }\n\n    else if (temp == \"VOTER\") {\n        return <Route exact path={Props.path} component={UserHome}></Route>\n    }\n\n    else if (loggedUser.userType == \"CANDIDATE\") {\n        return <Route exact path={Props.path} component={CandidateProfileForCandidate}></Route>\n    }\n    else {\n        history.push(\"/Login\")\n    }\n}\n\nexport default ProtectedRoutesForLogin;\n\n\n// import React, { useEffect, useState } from 'react';\n// import { Route } from 'react-router-dom';\n// import AdminHome from '../../Admin/AdminHome/AdminHome';\n// import UserHome from '../../UserHome/UserHome';\n// import CandidateProfileForCandidate from '../../CandidateProfile/CandidateProfileForCandidate';\n// import { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\n// function ProtectedRoutesForLogin(Props) {\n//     const history = useHistory();\n\n\n\n//     const [loggedUser, setloggedUser] = useState({\n//         token: \"\",\n//         type: \"\",\n//         id: \"\",\n//         firstName: \"\",\n//         lastName: \"\",\n//         email: \"\",\n//         userType: \"\"\n//     })\n\n//     const getCookie = () => {\n//         const cookies = document.cookie.split('; ');\n//         for (const cookie of cookies) {\n//             const [cookieName, cookieValue] = cookie.split('=');\n//             if (cookieName === 'loggedUser') {\n//                 return JSON.parse(decodeURIComponent(cookieValue));\n//             }\n//         }\n//         return null;\n//     }\n\n//     // Read the user data from the 'loggedUser' cookie when the component mounts\n//     const userFromCookie = getCookie('loggedUser');\n//     if (userFromCookie) {\n//         setloggedUser(userFromCookie);\n//     } else {\n//         // Redirect to the login page if no user data is found in cookies\n//         history.push(\"/Login\");\n//     }\n\n\n//     debugger;\n//     if (loggedUser && loggedUser.userType === \"ADMIN\") {\n//         return <Route exact path={Props.path} component={AdminHome}></Route>\n//     } else if (loggedUser && loggedUser.userType === \"VOTER\") {\n//         return <Route exact path={Props.path} component={UserHome}></Route>\n//     } else if (loggedUser && loggedUser.userType === \"CANDIDATE\") {\n//         return <Route exact path={Props.path} component={CandidateProfileForCandidate}></Route>\n//     } else {\n//         return null; // Return null if no match is found (no re-routing here)\n//     }\n// }\n\n// export default ProtectedRoutesForLogin;\n"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,kBAAkB;AAExC,OAAOC,SAAS,MAAM,iCAAiC;AACvD,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,4BAA4B,MAAM,qDAAqD;AAC9F,SAASC,UAAU,QAAQ,2CAA2C;AACtE,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjC,SAASC,uBAAuBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAEpC;;EAEA;EACA;EACA,MAAMC,OAAO,GAAGR,UAAU,CAAC,CAAC;EAC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI;EAER,MAAMS,IAAI,GAAE,OAAO;EAChB;;EAEC,IAAIA,IAAI,IAAI,OAAO,EAAE;IACjB,oBAAOL,OAAA,CAACR,KAAK;MAACc,KAAK;MAACC,IAAI,EAAEL,KAAK,CAACK,IAAK;MAACC,SAAS,EAAEf;IAAU;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EACxE,CAAC,MAEI,IAAIP,IAAI,IAAI,OAAO,EAAE;IACtB,oBAAOL,OAAA,CAACR,KAAK;MAACc,KAAK;MAACC,IAAI,EAAEL,KAAK,CAACK,IAAK;MAACC,SAAS,EAAEd;IAAS;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EACvE,CAAC,MAEI,IAAIC,UAAU,CAACC,QAAQ,IAAI,WAAW,EAAE;IACzC,oBAAOd,OAAA,CAACR,KAAK;MAACc,KAAK;MAACC,IAAI,EAAEL,KAAK,CAACK,IAAK;MAACC,SAAS,EAAEb;IAA6B;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAC3F,CAAC,MACI;IACDR,OAAO,CAACW,IAAI,CAAC,QAAQ,CAAC;EAC1B;AACJ;AAACZ,EAAA,CA/CQF,uBAAuB;EAAA,QAMZL,UAAU;AAAA;AAAAoB,EAAA,GANrBf,uBAAuB;AAiDhC,eAAeA,uBAAuB;;AAGtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}